version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: invoice_postgres
    environment:
      POSTGRES_DB: invoice_db
      POSTGRES_USER: invoice_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-change_this_password}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U invoice_user -d invoice_db"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - invoice_network

  # Redis Cache and Message Broker
  redis:
    image: redis:7-alpine
    container_name: invoice_redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-change_this_password}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - invoice_network

  # Main Application
  app:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: invoice_app
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://invoice_user:${POSTGRES_PASSWORD:-change_this_password}@postgres:5432/invoice_db
      - REDIS_URL=redis://:${REDIS_PASSWORD:-change_this_password}@redis:6379/0
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD:-change_this_password}@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD:-change_this_password}@redis:6379/0
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-change_this_jwt_secret_key}
      - SECRET_KEY=${SECRET_KEY:-change_this_flask_secret_key}
      - SENTRY_DSN=${SENTRY_DSN:-}
    volumes:
      - app_uploads:/app/uploads
      - app_exports:/app/exports
      - app_logs:/app/logs
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - invoice_network

  # Celery Worker for Background Processing
  celery_worker:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: invoice_celery_worker
    command: celery -A app.celery worker --loglevel=info --concurrency=4
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://invoice_user:${POSTGRES_PASSWORD:-change_this_password}@postgres:5432/invoice_db
      - REDIS_URL=redis://:${REDIS_PASSWORD:-change_this_password}@redis:6379/0
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD:-change_this_password}@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD:-change_this_password}@redis:6379/0
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-change_this_jwt_secret_key}
      - SECRET_KEY=${SECRET_KEY:-change_this_flask_secret_key}
    volumes:
      - app_uploads:/app/uploads
      - app_exports:/app/exports
      - app_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - invoice_network

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: invoice_nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - invoice_network

  # Monitoring with Prometheus (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: invoice_prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    restart: unless-stopped
    networks:
      - invoice_network
    profiles:
      - monitoring

  # Grafana Dashboard (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: invoice_grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    ports:
      - "3000:3000"
    restart: unless-stopped
    networks:
      - invoice_network
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_uploads:
    driver: local
  app_exports:
    driver: local
  app_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  invoice_network:
    driver: bridge